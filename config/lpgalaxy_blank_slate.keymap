/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
#ifdef TBLE_DUAL_2U
        zmk,physical-layout = &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
        zmk,physical-layout = &layout_ortho_4x12_1x2u;
#else
        zmk,physical-layout = &layout_ortho_4x12_all1u;
#endif
    };

    macros {
        ZMK_MACRO(thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };

    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
        tri {
            if-layers = <NUM_L NAV_L>;
            then-layer = <SYM_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                &kp ESC    &kp Q      &kp W      &kp E     &kp R     &kp T     &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BKSP
                &kp TAB    &kp A      &kp S      &kp D     &kp F     &kp G     &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp COLON
                &kp LSHFT  &kp Z      &kp X      &kp C     &kp V     &kp B     &kp N     &kp M     &kp LT    &kp COMMA &kp GT    &kp RET
                &kp LCTRL  &kp CAPS   &kp LGUI   &kp LALT  &mo NUM_L &kp SPACE &kp LBKT  &kp LCBR  &kp RBKT  &kp LEFT  &kp DOWN  &kp RIGHT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &bt BT_CLR &trans     &trans     &trans      &trans      &trans     &trans     &trans     &trans     &trans     &trans     &kp DEL
                &trans     &trans     &trans     &trans      &trans      &trans     &trans     &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
                &trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)   &bt BT(4)  &trans     &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
#ifdef TBLE_DUAL_2U
                &trans     &trans     &trans     &trans      &trans      &trans     &trans     &trans     &trans     &trans
#elif defined(TBLE_MIT)
                &trans     &trans     &trans     &trans      &trans      &trans     &trans     &trans     &trans     &trans
#else
                &trans     &trans     &trans     &trans      &trans      &trans     &trans     &trans     &trans     &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &trans     &kp LBKT   &trans     &trans     &trans    &kp RBKT    &kp C_PREV  &kp N7     &kp N8     &kp N9     &trans     &trans
                &trans     &kp MINUS  &trans     &trans     &trans    &kp EQUAL   &kp C_NEXT  &kp N4     &kp N5     &kp N6     &trans     &trans
                &trans     &kp GRAVE  &trans     &trans     &trans    &kp BSLH    &trans      &kp N1     &kp N2     &kp N3     &trans     &trans
#ifdef TBLE_DUAL_2U
                &trans     &trans     &trans     &kp N0     &trans     &trans      &trans     &trans     &trans     &trans
#elif defined(TBLE_MIT)
                &trans     &trans     &trans     &kp N0     &trans     &none       &trans     &kp DEL    &trans     &trans
#else
                &trans     &trans     &trans     &kp N0     &trans     &none       &none      &kp ESC    &kp DEL    &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &trans     &kp LBRC   &kp AMPS   &kp STAR    &kp LPAR   &kp RBRC   &trans     &trans     &trans     &trans     &trans     &bootloader
                &trans     &kp COLON  &kp DLLR   &kp PRCNT   &kp CARET  &kp PLUS   &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &kp TILDE  &kp EXCL   &kp AT      &kp HASH   &kp PIPE   &trans     &trans     &trans     &trans     &trans     &trans
#ifdef TBLE_DUAL_2U
                &trans     &trans     &trans     &kp RPAR    &trans     &trans     &trans     &trans     &trans     &trans
#elif defined(TBLE_MIT)
                &trans     &trans     &trans     &kp RPAR    &trans     &trans     &trans     &trans     &trans     &trans
#else
                &trans     &trans     &trans     &kp RPAR    &trans     &trans     &trans     &trans     &trans     &trans
#endif
            >;
        };
    };
};
